#!/usr/bin/env node

import mongoose from 'mongoose';
import { db } from '../server/config';
import twitchApi from '../server/utils/twitchApi';
import User from '../server/models/User';
import Channel from '../server/models/Channel';
import Followers from '../server/models/Followers';

mongoose.Promise = global.Promise;

function getChannelData(twitchId) {
  return new Promise((resolve, reject) => {
    Channel.findOne({ twitch_id: twitchId }, (err, data) => {
      if (err) {
        reject(err);
      } else {
        resolve(data);
      }
    });
  });
}

mongoose.connect(db, (err) => {
  if (err) {
    console.log(err);
    process.exit();
  }
});

const promise = new Promise((resolve, reject) => {
  User.find({}, (err, users) => {
    if (err) {
      reject(err);
    } else {
      users.forEach((user, index) => {
        twitchApi.createRequest('channel', 'GET', user.accessToken)
          .then((data) => {
            const { followers } = data;
            getChannelData(data._id)
              .then((channelData) => {
                const newFollowers = new Followers({ channel_id: channelData._id, followers });
                newFollowers.save((followerError, doc) => {
                  if (followerError) {
                    reject(followerError);
                  } else {
                    channelData.followers.push(doc);

                    channelData.save((channelError) => {
                      if (channelError) {
                        reject(channelError);
                      }

                      if (index === users.length - 1) {
                        resolve();
                      }
                    });
                  }
                });
              }, (error) => {
                reject(error);
              });
          }, (requestErr) => {
            reject(requestErr);
          });
      });
    }
  });
});

promise.then(() => {
  process.exit();
}, (err) => {
  console.log(err);
  process.exit();
});
